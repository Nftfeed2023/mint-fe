/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface FeedVaultInterface extends ethers.utils.Interface {
  functions: {
    "ONE_HUNDRED_PERCENT()": FunctionFragment;
    "amountReferal(uint256,address)": FunctionFragment;
    "containerVault(uint256)": FunctionFragment;
    "createVault(string,string,string,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "daoAddress()": FunctionFragment;
    "devAddress()": FunctionFragment;
    "dexFactory()": FunctionFragment;
    "dexRouter()": FunctionFragment;
    "feedToken()": FunctionFragment;
    "getAmountLpOut(uint256,uint256)": FunctionFragment;
    "getAmountOut(uint256,uint256)": FunctionFragment;
    "getAmountOutRatePair(uint256,uint256)": FunctionFragment;
    "getPair()": FunctionFragment;
    "mintNftByVault(uint256,uint256,address)": FunctionFragment;
    "mktAddress()": FunctionFragment;
    "name()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "projectFeeFeed(uint256)": FunctionFragment;
    "projectFeeUsd(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "returnsGuaranteed(uint256,uint256[])": FunctionFragment;
    "sellByVault(uint256,uint256[])": FunctionFragment;
    "sharingAddress()": FunctionFragment;
    "systemAmountFeed(uint256,address)": FunctionFragment;
    "systemAmountUsd(uint256,address)": FunctionFragment;
    "targetRedeem(uint256,uint256[])": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasureAddress()": FunctionFragment;
    "usdToken()": FunctionFragment;
    "vaultIdToNftAddress(address)": FunctionFragment;
    "vaultIndex()": FunctionFragment;
    "viewListNftAddress()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ONE_HUNDRED_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "amountReferal",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "containerVault",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createVault",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "daoAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "devAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dexFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "dexRouter", values?: undefined): string;
  encodeFunctionData(functionFragment: "feedToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAmountLpOut",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountOut",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountOutRatePair",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getPair", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintNftByVault",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mktAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "projectFeeFeed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "projectFeeUsd",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "returnsGuaranteed",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "sellByVault",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "sharingAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "systemAmountFeed",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "systemAmountUsd",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "targetRedeem",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "treasureAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "usdToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vaultIdToNftAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "viewListNftAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "ONE_HUNDRED_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "amountReferal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "containerVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "daoAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "devAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dexFactory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dexRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feedToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAmountLpOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountOutRatePair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintNftByVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mktAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "projectFeeFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "projectFeeUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnsGuaranteed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellByVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sharingAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "systemAmountFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "systemAmountUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasureAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vaultIdToNftAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaultIndex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "viewListNftAddress",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class FeedVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FeedVaultInterface;

  functions: {
    ONE_HUNDRED_PERCENT(overrides?: CallOverrides): Promise<[BigNumber]>;

    amountReferal(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    containerVault(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        name: string;
        manager: string;
        nft: string;
        priceNft: BigNumber;
        totalMint: BigNumber;
        totalLP: BigNumber;
        minQtyMintAllowedToSell: BigNumber;
        warrantyExpirationDate: BigNumber;
        warrantyFee: BigNumber;
        referalFee: BigNumber;
      }
    >;

    createVault(
      _name: string,
      _symbol: string,
      _baseUrlNft: string,
      _priceNft: BigNumberish,
      _minQtyMintAllowedToSell: BigNumberish,
      _warrantyExpirationDate: BigNumberish,
      _warrantyFee: BigNumberish,
      _referalFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    daoAddress(overrides?: CallOverrides): Promise<[string]>;

    devAddress(overrides?: CallOverrides): Promise<[string]>;

    dexFactory(overrides?: CallOverrides): Promise<[string]>;

    dexRouter(overrides?: CallOverrides): Promise<[string]>;

    feedToken(overrides?: CallOverrides): Promise<[string]>;

    getAmountLpOut(
      _vaultId: BigNumberish,
      _qtyIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    getAmountOut(
      _vaultId: BigNumberish,
      _qtyIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountUsd: BigNumber; amountFeed: BigNumber }
    >;

    getAmountOutRatePair(
      _vaultId: BigNumberish,
      _qtyIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountUsd: BigNumber; amountFeed: BigNumber }
    >;

    getPair(overrides?: CallOverrides): Promise<[string] & { pair: string }>;

    mintNftByVault(
      _vaultId: BigNumberish,
      _qty: BigNumberish,
      _referalAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mktAddress(overrides?: CallOverrides): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    projectFeeFeed(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    projectFeeUsd(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    returnsGuaranteed(
      _vaultId: BigNumberish,
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellByVault(
      _vaultId: BigNumberish,
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sharingAddress(overrides?: CallOverrides): Promise<[string]>;

    systemAmountFeed(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    systemAmountUsd(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    targetRedeem(
      _vaultId: BigNumberish,
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasureAddress(overrides?: CallOverrides): Promise<[string]>;

    usdToken(overrides?: CallOverrides): Promise<[string]>;

    vaultIdToNftAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vaultIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    viewListNftAddress(
      overrides?: CallOverrides
    ): Promise<[string[]] & { data: string[] }>;
  };

  ONE_HUNDRED_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

  amountReferal(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  containerVault(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      name: string;
      manager: string;
      nft: string;
      priceNft: BigNumber;
      totalMint: BigNumber;
      totalLP: BigNumber;
      minQtyMintAllowedToSell: BigNumber;
      warrantyExpirationDate: BigNumber;
      warrantyFee: BigNumber;
      referalFee: BigNumber;
    }
  >;

  createVault(
    _name: string,
    _symbol: string,
    _baseUrlNft: string,
    _priceNft: BigNumberish,
    _minQtyMintAllowedToSell: BigNumberish,
    _warrantyExpirationDate: BigNumberish,
    _warrantyFee: BigNumberish,
    _referalFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  daoAddress(overrides?: CallOverrides): Promise<string>;

  devAddress(overrides?: CallOverrides): Promise<string>;

  dexFactory(overrides?: CallOverrides): Promise<string>;

  dexRouter(overrides?: CallOverrides): Promise<string>;

  feedToken(overrides?: CallOverrides): Promise<string>;

  getAmountLpOut(
    _vaultId: BigNumberish,
    _qtyIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAmountOut(
    _vaultId: BigNumberish,
    _qtyIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amountUsd: BigNumber; amountFeed: BigNumber }
  >;

  getAmountOutRatePair(
    _vaultId: BigNumberish,
    _qtyIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amountUsd: BigNumber; amountFeed: BigNumber }
  >;

  getPair(overrides?: CallOverrides): Promise<string>;

  mintNftByVault(
    _vaultId: BigNumberish,
    _qty: BigNumberish,
    _referalAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mktAddress(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  projectFeeFeed(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  projectFeeUsd(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  returnsGuaranteed(
    _vaultId: BigNumberish,
    _tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellByVault(
    _vaultId: BigNumberish,
    _tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sharingAddress(overrides?: CallOverrides): Promise<string>;

  systemAmountFeed(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  systemAmountUsd(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  targetRedeem(
    _vaultId: BigNumberish,
    _tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasureAddress(overrides?: CallOverrides): Promise<string>;

  usdToken(overrides?: CallOverrides): Promise<string>;

  vaultIdToNftAddress(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  vaultIndex(overrides?: CallOverrides): Promise<BigNumber>;

  viewListNftAddress(overrides?: CallOverrides): Promise<string[]>;

  callStatic: {
    ONE_HUNDRED_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    amountReferal(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    containerVault(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        name: string;
        manager: string;
        nft: string;
        priceNft: BigNumber;
        totalMint: BigNumber;
        totalLP: BigNumber;
        minQtyMintAllowedToSell: BigNumber;
        warrantyExpirationDate: BigNumber;
        warrantyFee: BigNumber;
        referalFee: BigNumber;
      }
    >;

    createVault(
      _name: string,
      _symbol: string,
      _baseUrlNft: string,
      _priceNft: BigNumberish,
      _minQtyMintAllowedToSell: BigNumberish,
      _warrantyExpirationDate: BigNumberish,
      _warrantyFee: BigNumberish,
      _referalFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    daoAddress(overrides?: CallOverrides): Promise<string>;

    devAddress(overrides?: CallOverrides): Promise<string>;

    dexFactory(overrides?: CallOverrides): Promise<string>;

    dexRouter(overrides?: CallOverrides): Promise<string>;

    feedToken(overrides?: CallOverrides): Promise<string>;

    getAmountLpOut(
      _vaultId: BigNumberish,
      _qtyIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountOut(
      _vaultId: BigNumberish,
      _qtyIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountUsd: BigNumber; amountFeed: BigNumber }
    >;

    getAmountOutRatePair(
      _vaultId: BigNumberish,
      _qtyIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountUsd: BigNumber; amountFeed: BigNumber }
    >;

    getPair(overrides?: CallOverrides): Promise<string>;

    mintNftByVault(
      _vaultId: BigNumberish,
      _qty: BigNumberish,
      _referalAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    mktAddress(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    projectFeeFeed(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    projectFeeUsd(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    returnsGuaranteed(
      _vaultId: BigNumberish,
      _tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountUsd: BigNumber; amountFeed: BigNumber }
    >;

    sellByVault(
      _vaultId: BigNumberish,
      _tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountUsd: BigNumber; amountFeed: BigNumber }
    >;

    sharingAddress(overrides?: CallOverrides): Promise<string>;

    systemAmountFeed(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    systemAmountUsd(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    targetRedeem(
      _vaultId: BigNumberish,
      _tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasureAddress(overrides?: CallOverrides): Promise<string>;

    usdToken(overrides?: CallOverrides): Promise<string>;

    vaultIdToNftAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultIndex(overrides?: CallOverrides): Promise<BigNumber>;

    viewListNftAddress(overrides?: CallOverrides): Promise<string[]>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    ONE_HUNDRED_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    amountReferal(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    containerVault(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createVault(
      _name: string,
      _symbol: string,
      _baseUrlNft: string,
      _priceNft: BigNumberish,
      _minQtyMintAllowedToSell: BigNumberish,
      _warrantyExpirationDate: BigNumberish,
      _warrantyFee: BigNumberish,
      _referalFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    daoAddress(overrides?: CallOverrides): Promise<BigNumber>;

    devAddress(overrides?: CallOverrides): Promise<BigNumber>;

    dexFactory(overrides?: CallOverrides): Promise<BigNumber>;

    dexRouter(overrides?: CallOverrides): Promise<BigNumber>;

    feedToken(overrides?: CallOverrides): Promise<BigNumber>;

    getAmountLpOut(
      _vaultId: BigNumberish,
      _qtyIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountOut(
      _vaultId: BigNumberish,
      _qtyIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountOutRatePair(
      _vaultId: BigNumberish,
      _qtyIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPair(overrides?: CallOverrides): Promise<BigNumber>;

    mintNftByVault(
      _vaultId: BigNumberish,
      _qty: BigNumberish,
      _referalAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mktAddress(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    projectFeeFeed(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    projectFeeUsd(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    returnsGuaranteed(
      _vaultId: BigNumberish,
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellByVault(
      _vaultId: BigNumberish,
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sharingAddress(overrides?: CallOverrides): Promise<BigNumber>;

    systemAmountFeed(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    systemAmountUsd(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    targetRedeem(
      _vaultId: BigNumberish,
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasureAddress(overrides?: CallOverrides): Promise<BigNumber>;

    usdToken(overrides?: CallOverrides): Promise<BigNumber>;

    vaultIdToNftAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultIndex(overrides?: CallOverrides): Promise<BigNumber>;

    viewListNftAddress(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ONE_HUNDRED_PERCENT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    amountReferal(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    containerVault(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createVault(
      _name: string,
      _symbol: string,
      _baseUrlNft: string,
      _priceNft: BigNumberish,
      _minQtyMintAllowedToSell: BigNumberish,
      _warrantyExpirationDate: BigNumberish,
      _warrantyFee: BigNumberish,
      _referalFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    daoAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    devAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dexFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dexRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feedToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAmountLpOut(
      _vaultId: BigNumberish,
      _qtyIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountOut(
      _vaultId: BigNumberish,
      _qtyIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountOutRatePair(
      _vaultId: BigNumberish,
      _qtyIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintNftByVault(
      _vaultId: BigNumberish,
      _qty: BigNumberish,
      _referalAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mktAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    projectFeeFeed(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    projectFeeUsd(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    returnsGuaranteed(
      _vaultId: BigNumberish,
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellByVault(
      _vaultId: BigNumberish,
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sharingAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    systemAmountFeed(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    systemAmountUsd(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    targetRedeem(
      _vaultId: BigNumberish,
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasureAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    usdToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaultIdToNftAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    viewListNftAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
