/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface FeedVaultV1Interface extends ethers.utils.Interface {
  functions: {
    "DIVISOR_ERC20()": FunctionFragment;
    "MAX_FEE_PERCENT()": FunctionFragment;
    "ONE_HUNDRED_PERCENT()": FunctionFragment;
    "containerVault(uint256)": FunctionFragment;
    "createVault(string,string,string,uint256,uint256)": FunctionFragment;
    "dexFactory()": FunctionFragment;
    "dexRouter()": FunctionFragment;
    "feeAddress()": FunctionFragment;
    "feedToken()": FunctionFragment;
    "getAmountLpOutByNft(uint256,address)": FunctionFragment;
    "getAmountLpOutByVaulId(uint256,uint256)": FunctionFragment;
    "getAmountOutByNft(uint256,address)": FunctionFragment;
    "getAmountOutByVaulId(uint256,uint256)": FunctionFragment;
    "getAmountOutRatePairByVaulId(uint256,uint256)": FunctionFragment;
    "getPair()": FunctionFragment;
    "getVaultInfoById(uint256)": FunctionFragment;
    "getVaultInfoByNft(address)": FunctionFragment;
    "getVaultInfos()": FunctionFragment;
    "mintNftByVault(uint256,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "percentFee()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "returnsGuaranteed(uint256,uint256[])": FunctionFragment;
    "sellByNftAddress(address,uint256[])": FunctionFragment;
    "sellByVaultId(uint256,uint256[])": FunctionFragment;
    "setPercentFee(uint256)": FunctionFragment;
    "stableToken()": FunctionFragment;
    "targetRedeem(uint256,uint256[])": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "vaultIdToNftAddress(address)": FunctionFragment;
    "vaultIndex()": FunctionFragment;
    "viewListNftAddress()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DIVISOR_ERC20",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_FEE_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ONE_HUNDRED_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "containerVault",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createVault",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dexFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "dexRouter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feedToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAmountLpOutByNft",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountLpOutByVaulId",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountOutByNft",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountOutByVaulId",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountOutRatePairByVaulId",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getPair", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getVaultInfoById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultInfoByNft",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultInfos",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintNftByVault",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "percentFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "returnsGuaranteed",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "sellByNftAddress",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "sellByVaultId",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setPercentFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stableToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetRedeem",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultIdToNftAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "viewListNftAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DIVISOR_ERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_FEE_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ONE_HUNDRED_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "containerVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dexFactory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dexRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feedToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAmountLpOutByNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountLpOutByVaulId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountOutByNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountOutByVaulId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountOutRatePairByVaulId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVaultInfoById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultInfoByNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintNftByVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "percentFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnsGuaranteed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellByNftAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellByVaultId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPercentFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultIdToNftAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaultIndex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "viewListNftAddress",
    data: BytesLike
  ): Result;

  events: {
    "NotiAmount(uint256,uint256)": EventFragment;
    "NotiAmountLP(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NotiAmount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NotiAmountLP"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type NotiAmountEvent = TypedEvent<
  [BigNumber, BigNumber] & {
    amountStableToken: BigNumber;
    amountFeedToken: BigNumber;
  }
>;

export type NotiAmountLPEvent = TypedEvent<
  [BigNumber] & { amountLps: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class FeedVaultV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FeedVaultV1Interface;

  functions: {
    DIVISOR_ERC20(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_FEE_PERCENT(overrides?: CallOverrides): Promise<[BigNumber]>;

    ONE_HUNDRED_PERCENT(overrides?: CallOverrides): Promise<[BigNumber]>;

    containerVault(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        name: string;
        manager: string;
        nft: string;
        priceNft: BigNumber;
        totalMint: BigNumber;
        totalLP: BigNumber;
        minQtyMintAllowedToSell: BigNumber;
      }
    >;

    createVault(
      _name: string,
      _symbol: string,
      _baseUrlNft: string,
      _priceNft: BigNumberish,
      _minQtyMintAllowedToSell: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dexFactory(overrides?: CallOverrides): Promise<[string]>;

    dexRouter(overrides?: CallOverrides): Promise<[string]>;

    feeAddress(overrides?: CallOverrides): Promise<[string]>;

    feedToken(overrides?: CallOverrides): Promise<[string]>;

    getAmountLpOutByNft(
      _qtyIn: BigNumberish,
      _nft: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    getAmountLpOutByVaulId(
      _qtyIn: BigNumberish,
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    getAmountOutByNft(
      _qtyIn: BigNumberish,
      _nft: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        amountStableToken: BigNumber;
        amountFeedToken: BigNumber;
      }
    >;

    getAmountOutByVaulId(
      _qtyIn: BigNumberish,
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        amountStableToken: BigNumber;
        amountFeedToken: BigNumber;
      }
    >;

    getAmountOutRatePairByVaulId(
      _qtyIn: BigNumberish,
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        amountStableToken: BigNumber;
        amountFeedToken: BigNumber;
      }
    >;

    getPair(overrides?: CallOverrides): Promise<[string] & { pair: string }>;

    getVaultInfoById(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          name: string;
          manager: string;
          nft: string;
          priceNft: BigNumber;
          totalMint: BigNumber;
          totalLP: BigNumber;
          minQtyMintAllowedToSell: BigNumber;
        }
      ] & {
        vaultInfo: [
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          name: string;
          manager: string;
          nft: string;
          priceNft: BigNumber;
          totalMint: BigNumber;
          totalLP: BigNumber;
          minQtyMintAllowedToSell: BigNumber;
        };
      }
    >;

    getVaultInfoByNft(
      _nft: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          name: string;
          manager: string;
          nft: string;
          priceNft: BigNumber;
          totalMint: BigNumber;
          totalLP: BigNumber;
          minQtyMintAllowedToSell: BigNumber;
        }
      ] & {
        vaultInfo: [
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          name: string;
          manager: string;
          nft: string;
          priceNft: BigNumber;
          totalMint: BigNumber;
          totalLP: BigNumber;
          minQtyMintAllowedToSell: BigNumber;
        };
      }
    >;

    getVaultInfos(
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          name: string;
          manager: string;
          nft: string;
          priceNft: BigNumber;
          totalMint: BigNumber;
          totalLP: BigNumber;
          minQtyMintAllowedToSell: BigNumber;
        })[]
      ] & {
        data: ([
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          name: string;
          manager: string;
          nft: string;
          priceNft: BigNumber;
          totalMint: BigNumber;
          totalLP: BigNumber;
          minQtyMintAllowedToSell: BigNumber;
        })[];
      }
    >;

    mintNftByVault(
      _vaultId: BigNumberish,
      _qty: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    percentFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    returnsGuaranteed(
      vaultId: BigNumberish,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellByNftAddress(
      _nft: string,
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellByVaultId(
      _vaultId: BigNumberish,
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPercentFee(
      _percentFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stableToken(overrides?: CallOverrides): Promise<[string]>;

    targetRedeem(
      _vaultId: BigNumberish,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vaultIdToNftAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vaultIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    viewListNftAddress(
      overrides?: CallOverrides
    ): Promise<[string[]] & { data: string[] }>;
  };

  DIVISOR_ERC20(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_FEE_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

  ONE_HUNDRED_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

  containerVault(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      name: string;
      manager: string;
      nft: string;
      priceNft: BigNumber;
      totalMint: BigNumber;
      totalLP: BigNumber;
      minQtyMintAllowedToSell: BigNumber;
    }
  >;

  createVault(
    _name: string,
    _symbol: string,
    _baseUrlNft: string,
    _priceNft: BigNumberish,
    _minQtyMintAllowedToSell: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dexFactory(overrides?: CallOverrides): Promise<string>;

  dexRouter(overrides?: CallOverrides): Promise<string>;

  feeAddress(overrides?: CallOverrides): Promise<string>;

  feedToken(overrides?: CallOverrides): Promise<string>;

  getAmountLpOutByNft(
    _qtyIn: BigNumberish,
    _nft: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAmountLpOutByVaulId(
    _qtyIn: BigNumberish,
    _vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAmountOutByNft(
    _qtyIn: BigNumberish,
    _nft: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      amountStableToken: BigNumber;
      amountFeedToken: BigNumber;
    }
  >;

  getAmountOutByVaulId(
    _qtyIn: BigNumberish,
    _vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      amountStableToken: BigNumber;
      amountFeedToken: BigNumber;
    }
  >;

  getAmountOutRatePairByVaulId(
    _qtyIn: BigNumberish,
    _vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      amountStableToken: BigNumber;
      amountFeedToken: BigNumber;
    }
  >;

  getPair(overrides?: CallOverrides): Promise<string>;

  getVaultInfoById(
    _vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      name: string;
      manager: string;
      nft: string;
      priceNft: BigNumber;
      totalMint: BigNumber;
      totalLP: BigNumber;
      minQtyMintAllowedToSell: BigNumber;
    }
  >;

  getVaultInfoByNft(
    _nft: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      name: string;
      manager: string;
      nft: string;
      priceNft: BigNumber;
      totalMint: BigNumber;
      totalLP: BigNumber;
      minQtyMintAllowedToSell: BigNumber;
    }
  >;

  getVaultInfos(
    overrides?: CallOverrides
  ): Promise<
    ([string, string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      name: string;
      manager: string;
      nft: string;
      priceNft: BigNumber;
      totalMint: BigNumber;
      totalLP: BigNumber;
      minQtyMintAllowedToSell: BigNumber;
    })[]
  >;

  mintNftByVault(
    _vaultId: BigNumberish,
    _qty: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  percentFee(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  returnsGuaranteed(
    vaultId: BigNumberish,
    tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellByNftAddress(
    _nft: string,
    _tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellByVaultId(
    _vaultId: BigNumberish,
    _tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPercentFee(
    _percentFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stableToken(overrides?: CallOverrides): Promise<string>;

  targetRedeem(
    _vaultId: BigNumberish,
    tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vaultIdToNftAddress(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  vaultIndex(overrides?: CallOverrides): Promise<BigNumber>;

  viewListNftAddress(overrides?: CallOverrides): Promise<string[]>;

  callStatic: {
    DIVISOR_ERC20(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FEE_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_HUNDRED_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    containerVault(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        name: string;
        manager: string;
        nft: string;
        priceNft: BigNumber;
        totalMint: BigNumber;
        totalLP: BigNumber;
        minQtyMintAllowedToSell: BigNumber;
      }
    >;

    createVault(
      _name: string,
      _symbol: string,
      _baseUrlNft: string,
      _priceNft: BigNumberish,
      _minQtyMintAllowedToSell: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dexFactory(overrides?: CallOverrides): Promise<string>;

    dexRouter(overrides?: CallOverrides): Promise<string>;

    feeAddress(overrides?: CallOverrides): Promise<string>;

    feedToken(overrides?: CallOverrides): Promise<string>;

    getAmountLpOutByNft(
      _qtyIn: BigNumberish,
      _nft: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountLpOutByVaulId(
      _qtyIn: BigNumberish,
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountOutByNft(
      _qtyIn: BigNumberish,
      _nft: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        amountStableToken: BigNumber;
        amountFeedToken: BigNumber;
      }
    >;

    getAmountOutByVaulId(
      _qtyIn: BigNumberish,
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        amountStableToken: BigNumber;
        amountFeedToken: BigNumber;
      }
    >;

    getAmountOutRatePairByVaulId(
      _qtyIn: BigNumberish,
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        amountStableToken: BigNumber;
        amountFeedToken: BigNumber;
      }
    >;

    getPair(overrides?: CallOverrides): Promise<string>;

    getVaultInfoById(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        name: string;
        manager: string;
        nft: string;
        priceNft: BigNumber;
        totalMint: BigNumber;
        totalLP: BigNumber;
        minQtyMintAllowedToSell: BigNumber;
      }
    >;

    getVaultInfoByNft(
      _nft: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        name: string;
        manager: string;
        nft: string;
        priceNft: BigNumber;
        totalMint: BigNumber;
        totalLP: BigNumber;
        minQtyMintAllowedToSell: BigNumber;
      }
    >;

    getVaultInfos(
      overrides?: CallOverrides
    ): Promise<
      ([string, string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        name: string;
        manager: string;
        nft: string;
        priceNft: BigNumber;
        totalMint: BigNumber;
        totalLP: BigNumber;
        minQtyMintAllowedToSell: BigNumber;
      })[]
    >;

    mintNftByVault(
      _vaultId: BigNumberish,
      _qty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    name(overrides?: CallOverrides): Promise<string>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    percentFee(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    returnsGuaranteed(
      vaultId: BigNumberish,
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        amountStableToken: BigNumber;
        amountFeedToken: BigNumber;
      }
    >;

    sellByNftAddress(
      _nft: string,
      _tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        amountStableToken: BigNumber;
        amountFeedToken: BigNumber;
      }
    >;

    sellByVaultId(
      _vaultId: BigNumberish,
      _tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        amountStableToken: BigNumber;
        amountFeedToken: BigNumber;
      }
    >;

    setPercentFee(
      _percentFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stableToken(overrides?: CallOverrides): Promise<string>;

    targetRedeem(
      _vaultId: BigNumberish,
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vaultIdToNftAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultIndex(overrides?: CallOverrides): Promise<BigNumber>;

    viewListNftAddress(overrides?: CallOverrides): Promise<string[]>;
  };

  filters: {
    "NotiAmount(uint256,uint256)"(
      amountStableToken?: null,
      amountFeedToken?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { amountStableToken: BigNumber; amountFeedToken: BigNumber }
    >;

    NotiAmount(
      amountStableToken?: null,
      amountFeedToken?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { amountStableToken: BigNumber; amountFeedToken: BigNumber }
    >;

    "NotiAmountLP(uint256)"(
      amountLps?: null
    ): TypedEventFilter<[BigNumber], { amountLps: BigNumber }>;

    NotiAmountLP(
      amountLps?: null
    ): TypedEventFilter<[BigNumber], { amountLps: BigNumber }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    DIVISOR_ERC20(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FEE_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_HUNDRED_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    containerVault(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createVault(
      _name: string,
      _symbol: string,
      _baseUrlNft: string,
      _priceNft: BigNumberish,
      _minQtyMintAllowedToSell: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dexFactory(overrides?: CallOverrides): Promise<BigNumber>;

    dexRouter(overrides?: CallOverrides): Promise<BigNumber>;

    feeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    feedToken(overrides?: CallOverrides): Promise<BigNumber>;

    getAmountLpOutByNft(
      _qtyIn: BigNumberish,
      _nft: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountLpOutByVaulId(
      _qtyIn: BigNumberish,
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountOutByNft(
      _qtyIn: BigNumberish,
      _nft: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountOutByVaulId(
      _qtyIn: BigNumberish,
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountOutRatePairByVaulId(
      _qtyIn: BigNumberish,
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPair(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultInfoById(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultInfoByNft(
      _nft: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultInfos(overrides?: CallOverrides): Promise<BigNumber>;

    mintNftByVault(
      _vaultId: BigNumberish,
      _qty: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    percentFee(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    returnsGuaranteed(
      vaultId: BigNumberish,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellByNftAddress(
      _nft: string,
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellByVaultId(
      _vaultId: BigNumberish,
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPercentFee(
      _percentFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stableToken(overrides?: CallOverrides): Promise<BigNumber>;

    targetRedeem(
      _vaultId: BigNumberish,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vaultIdToNftAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultIndex(overrides?: CallOverrides): Promise<BigNumber>;

    viewListNftAddress(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DIVISOR_ERC20(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_FEE_PERCENT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ONE_HUNDRED_PERCENT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    containerVault(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createVault(
      _name: string,
      _symbol: string,
      _baseUrlNft: string,
      _priceNft: BigNumberish,
      _minQtyMintAllowedToSell: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dexFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dexRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feedToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAmountLpOutByNft(
      _qtyIn: BigNumberish,
      _nft: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountLpOutByVaulId(
      _qtyIn: BigNumberish,
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountOutByNft(
      _qtyIn: BigNumberish,
      _nft: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountOutByVaulId(
      _qtyIn: BigNumberish,
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountOutRatePairByVaulId(
      _qtyIn: BigNumberish,
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVaultInfoById(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultInfoByNft(
      _nft: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultInfos(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintNftByVault(
      _vaultId: BigNumberish,
      _qty: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    percentFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    returnsGuaranteed(
      vaultId: BigNumberish,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellByNftAddress(
      _nft: string,
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellByVaultId(
      _vaultId: BigNumberish,
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPercentFee(
      _percentFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stableToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetRedeem(
      _vaultId: BigNumberish,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vaultIdToNftAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    viewListNftAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
