/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MintNftFactoryInterface extends ethers.utils.Interface {
  functions: {
    "changeRoyaltyAddress(address)": FunctionFragment;
    "changeRoyaltyFee(uint256)": FunctionFragment;
    "containerNfts(uint256)": FunctionFragment;
    "deploy(string,string,string,uint256,uint256,uint256)": FunctionFragment;
    "endTimes(address)": FunctionFragment;
    "getAmountOut(address)": FunctionFragment;
    "managers(address)": FunctionFragment;
    "mapPrice(address)": FunctionFragment;
    "maxTotalSupplys(address)": FunctionFragment;
    "mint(address)": FunctionFragment;
    "minteds(address,address)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "royaltyAddress()": FunctionFragment;
    "royaltyFee()": FunctionFragment;
    "totalPool()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "changeRoyaltyAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeRoyaltyFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "containerNfts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deploy",
    values: [string, string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "endTimes", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getAmountOut",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "managers", values: [string]): string;
  encodeFunctionData(functionFragment: "mapPrice", values: [string]): string;
  encodeFunctionData(
    functionFragment: "maxTotalSupplys",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "mint", values: [string]): string;
  encodeFunctionData(
    functionFragment: "minteds",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "totalPool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "changeRoyaltyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeRoyaltyFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "containerNfts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endTimes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "managers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mapPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxTotalSupplys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minteds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "royaltyFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "DeployNft(uint256,address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DeployNft"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type DeployNftEvent = TypedEvent<
  [BigNumber, string, string] & {
    poolId: BigNumber;
    nftAddress: string;
    manager: string;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class MintNftFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MintNftFactoryInterface;

  functions: {
    changeRoyaltyAddress(
      _royaltyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeRoyaltyFee(
      _royaltyFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    containerNfts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    deploy(
      _name: string,
      _symbol: string,
      _baseUrlNft: string,
      _priceNft: BigNumberish,
      _endTime: BigNumberish,
      _maxTotalSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    endTimes(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getAmountOut(
      _nft: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountOut: BigNumber }>;

    managers(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    mapPrice(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    maxTotalSupplys(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mint(
      _nft: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    minteds(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    royaltyAddress(overrides?: CallOverrides): Promise<[string]>;

    royaltyFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalPool(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  changeRoyaltyAddress(
    _royaltyAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeRoyaltyFee(
    _royaltyFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  containerNfts(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  deploy(
    _name: string,
    _symbol: string,
    _baseUrlNft: string,
    _priceNft: BigNumberish,
    _endTime: BigNumberish,
    _maxTotalSupply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  endTimes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  getAmountOut(_nft: string, overrides?: CallOverrides): Promise<BigNumber>;

  managers(arg0: string, overrides?: CallOverrides): Promise<string>;

  mapPrice(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  maxTotalSupplys(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    _nft: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  minteds(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  royaltyAddress(overrides?: CallOverrides): Promise<string>;

  royaltyFee(overrides?: CallOverrides): Promise<BigNumber>;

  totalPool(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    changeRoyaltyAddress(
      _royaltyAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changeRoyaltyFee(
      _royaltyFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    containerNfts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    deploy(
      _name: string,
      _symbol: string,
      _baseUrlNft: string,
      _priceNft: BigNumberish,
      _endTime: BigNumberish,
      _maxTotalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { poolId: BigNumber; nftAddress: string }>;

    endTimes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getAmountOut(_nft: string, overrides?: CallOverrides): Promise<BigNumber>;

    managers(arg0: string, overrides?: CallOverrides): Promise<string>;

    mapPrice(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxTotalSupplys(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(_nft: string, overrides?: CallOverrides): Promise<BigNumber>;

    minteds(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    royaltyAddress(overrides?: CallOverrides): Promise<string>;

    royaltyFee(overrides?: CallOverrides): Promise<BigNumber>;

    totalPool(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DeployNft(uint256,address,address)"(
      poolId?: null,
      nftAddress?: null,
      manager?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { poolId: BigNumber; nftAddress: string; manager: string }
    >;

    DeployNft(
      poolId?: null,
      nftAddress?: null,
      manager?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { poolId: BigNumber; nftAddress: string; manager: string }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    changeRoyaltyAddress(
      _royaltyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeRoyaltyFee(
      _royaltyFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    containerNfts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deploy(
      _name: string,
      _symbol: string,
      _baseUrlNft: string,
      _priceNft: BigNumberish,
      _endTime: BigNumberish,
      _maxTotalSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    endTimes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getAmountOut(_nft: string, overrides?: CallOverrides): Promise<BigNumber>;

    managers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    mapPrice(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxTotalSupplys(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      _nft: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    minteds(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    royaltyAddress(overrides?: CallOverrides): Promise<BigNumber>;

    royaltyFee(overrides?: CallOverrides): Promise<BigNumber>;

    totalPool(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    changeRoyaltyAddress(
      _royaltyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeRoyaltyFee(
      _royaltyFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    containerNfts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deploy(
      _name: string,
      _symbol: string,
      _baseUrlNft: string,
      _priceNft: BigNumberish,
      _endTime: BigNumberish,
      _maxTotalSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    endTimes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountOut(
      _nft: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    managers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mapPrice(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxTotalSupplys(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      _nft: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    minteds(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    royaltyAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    royaltyFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
