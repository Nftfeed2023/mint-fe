/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MintNftFactoryV2Interface extends ethers.utils.Interface {
  functions: {
    "MAX_PERCENT_AFF()": FunctionFragment;
    "ONE_HUNDRED_PERCENT()": FunctionFragment;
    "admins(address)": FunctionFragment;
    "changeEndTime(address,uint256)": FunctionFragment;
    "changeManager(address,address)": FunctionFragment;
    "changeMaxTotalSupply(address,uint256)": FunctionFragment;
    "changePercentAff(address,uint256)": FunctionFragment;
    "changePriceNft(address,uint256)": FunctionFragment;
    "changePromotion(address,uint256[],uint256[])": FunctionFragment;
    "changeRoyaltyAddress(address)": FunctionFragment;
    "changeRoyaltyFee(uint256)": FunctionFragment;
    "changeSystemPercentAff(address,uint256)": FunctionFragment;
    "containerNfts(uint256)": FunctionFragment;
    "deploy(string,string,string,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "endTimes(address)": FunctionFragment;
    "getAmountOut(address)": FunctionFragment;
    "getAmountOutByQty(address,uint256)": FunctionFragment;
    "getPromotionAmountByQty(address,uint256)": FunctionFragment;
    "getPromotionPercentByQty(address,uint256)": FunctionFragment;
    "getPromotionPercents(address)": FunctionFragment;
    "getPromotionQtys(address)": FunctionFragment;
    "managers(address)": FunctionFragment;
    "mapPrice(address)": FunctionFragment;
    "maxAllocationPerUsers(address)": FunctionFragment;
    "maxTotalSupplys(address)": FunctionFragment;
    "mint(address,address)": FunctionFragment;
    "mintByQty(address,uint256,address)": FunctionFragment;
    "minteds(address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "partnerAffs(address,address)": FunctionFragment;
    "percentAffs(address)": FunctionFragment;
    "promotionPercents(address,uint256)": FunctionFragment;
    "promotionQtys(address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "royaltyAddress()": FunctionFragment;
    "royaltyFee()": FunctionFragment;
    "systemPercentAffs(address)": FunctionFragment;
    "totalPool()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateAdmin(address,bool)": FunctionFragment;
    "updatePartnerAff(address,address[],bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MAX_PERCENT_AFF",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ONE_HUNDRED_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admins", values: [string]): string;
  encodeFunctionData(
    functionFragment: "changeEndTime",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeManager",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeMaxTotalSupply",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changePercentAff",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changePriceNft",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changePromotion",
    values: [string, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "changeRoyaltyAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeRoyaltyFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeSystemPercentAff",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "containerNfts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deploy",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "endTimes", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getAmountOut",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountOutByQty",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPromotionAmountByQty",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPromotionPercentByQty",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPromotionPercents",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPromotionQtys",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "managers", values: [string]): string;
  encodeFunctionData(functionFragment: "mapPrice", values: [string]): string;
  encodeFunctionData(
    functionFragment: "maxAllocationPerUsers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "maxTotalSupplys",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mintByQty",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "minteds",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "partnerAffs",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "percentAffs", values: [string]): string;
  encodeFunctionData(
    functionFragment: "promotionPercents",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "promotionQtys",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "systemPercentAffs",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "totalPool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAdmin",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePartnerAff",
    values: [string, string[], boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_PERCENT_AFF",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ONE_HUNDRED_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeMaxTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changePercentAff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changePriceNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changePromotion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeRoyaltyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeRoyaltyFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeSystemPercentAff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "containerNfts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endTimes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountOutByQty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPromotionAmountByQty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPromotionPercentByQty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPromotionPercents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPromotionQtys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "managers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mapPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxAllocationPerUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTotalSupplys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintByQty", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minteds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "partnerAffs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "percentAffs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "promotionPercents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "promotionQtys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "royaltyFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "systemPercentAffs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePartnerAff",
    data: BytesLike
  ): Result;

  events: {
    "DeployNft(uint256,address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DeployNft"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type DeployNftEvent = TypedEvent<
  [BigNumber, string, string] & {
    poolId: BigNumber;
    nftAddress: string;
    manager: string;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class MintNftFactoryV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MintNftFactoryV2Interface;

  functions: {
    MAX_PERCENT_AFF(overrides?: CallOverrides): Promise<[BigNumber]>;

    ONE_HUNDRED_PERCENT(overrides?: CallOverrides): Promise<[BigNumber]>;

    admins(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    changeEndTime(
      _nft: string,
      _endTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeManager(
      _nft: string,
      _newManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeMaxTotalSupply(
      _nft: string,
      _maxTotalSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changePercentAff(
      _nft: string,
      _percentAff: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changePriceNft(
      _nft: string,
      _priceNft: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changePromotion(
      _nft: string,
      _qtys: BigNumberish[],
      _percents: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeRoyaltyAddress(
      _royaltyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeRoyaltyFee(
      _royaltyFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeSystemPercentAff(
      _nft: string,
      _percentAff: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    containerNfts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    deploy(
      _name: string,
      _symbol: string,
      _baseUrlNft: string,
      _priceNft: BigNumberish,
      _endTime: BigNumberish,
      _maxTotalSupply: BigNumberish,
      _maxAllocationPerUser: BigNumberish,
      _percentAff: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    endTimes(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getAmountOut(
      _nft: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountOut: BigNumber }>;

    getAmountOutByQty(
      _nft: string,
      _qty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountOut: BigNumber }>;

    getPromotionAmountByQty(
      _nft: string,
      _qty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPromotionPercentByQty(
      _nft: string,
      _qty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPromotionPercents(
      _nft: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getPromotionQtys(
      _nft: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    managers(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    mapPrice(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    maxAllocationPerUsers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxTotalSupplys(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mint(
      _nft: string,
      _ref: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintByQty(
      _nft: string,
      _qty: BigNumberish,
      _ref: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    minteds(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    partnerAffs(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    percentAffs(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    promotionPercents(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    promotionQtys(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    royaltyAddress(overrides?: CallOverrides): Promise<[string]>;

    royaltyFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    systemPercentAffs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalPool(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateAdmin(
      _admin: string,
      _isAdd: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePartnerAff(
      _nft: string,
      _partners: string[],
      _isAdd: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  MAX_PERCENT_AFF(overrides?: CallOverrides): Promise<BigNumber>;

  ONE_HUNDRED_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

  admins(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  changeEndTime(
    _nft: string,
    _endTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeManager(
    _nft: string,
    _newManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeMaxTotalSupply(
    _nft: string,
    _maxTotalSupply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changePercentAff(
    _nft: string,
    _percentAff: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changePriceNft(
    _nft: string,
    _priceNft: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changePromotion(
    _nft: string,
    _qtys: BigNumberish[],
    _percents: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeRoyaltyAddress(
    _royaltyAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeRoyaltyFee(
    _royaltyFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeSystemPercentAff(
    _nft: string,
    _percentAff: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  containerNfts(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  deploy(
    _name: string,
    _symbol: string,
    _baseUrlNft: string,
    _priceNft: BigNumberish,
    _endTime: BigNumberish,
    _maxTotalSupply: BigNumberish,
    _maxAllocationPerUser: BigNumberish,
    _percentAff: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  endTimes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  getAmountOut(_nft: string, overrides?: CallOverrides): Promise<BigNumber>;

  getAmountOutByQty(
    _nft: string,
    _qty: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPromotionAmountByQty(
    _nft: string,
    _qty: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPromotionPercentByQty(
    _nft: string,
    _qty: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPromotionPercents(
    _nft: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getPromotionQtys(
    _nft: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  managers(arg0: string, overrides?: CallOverrides): Promise<string>;

  mapPrice(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  maxAllocationPerUsers(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxTotalSupplys(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    _nft: string,
    _ref: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintByQty(
    _nft: string,
    _qty: BigNumberish,
    _ref: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  minteds(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  partnerAffs(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  percentAffs(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  promotionPercents(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  promotionQtys(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  royaltyAddress(overrides?: CallOverrides): Promise<string>;

  royaltyFee(overrides?: CallOverrides): Promise<BigNumber>;

  systemPercentAffs(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalPool(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateAdmin(
    _admin: string,
    _isAdd: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePartnerAff(
    _nft: string,
    _partners: string[],
    _isAdd: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_PERCENT_AFF(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_HUNDRED_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    admins(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    changeEndTime(
      _nft: string,
      _endTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeManager(
      _nft: string,
      _newManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changeMaxTotalSupply(
      _nft: string,
      _maxTotalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changePercentAff(
      _nft: string,
      _percentAff: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changePriceNft(
      _nft: string,
      _priceNft: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changePromotion(
      _nft: string,
      _qtys: BigNumberish[],
      _percents: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    changeRoyaltyAddress(
      _royaltyAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changeRoyaltyFee(
      _royaltyFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeSystemPercentAff(
      _nft: string,
      _percentAff: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    containerNfts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    deploy(
      _name: string,
      _symbol: string,
      _baseUrlNft: string,
      _priceNft: BigNumberish,
      _endTime: BigNumberish,
      _maxTotalSupply: BigNumberish,
      _maxAllocationPerUser: BigNumberish,
      _percentAff: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { poolId: BigNumber; nftAddress: string }>;

    endTimes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getAmountOut(_nft: string, overrides?: CallOverrides): Promise<BigNumber>;

    getAmountOutByQty(
      _nft: string,
      _qty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPromotionAmountByQty(
      _nft: string,
      _qty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPromotionPercentByQty(
      _nft: string,
      _qty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPromotionPercents(
      _nft: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getPromotionQtys(
      _nft: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    managers(arg0: string, overrides?: CallOverrides): Promise<string>;

    mapPrice(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxAllocationPerUsers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxTotalSupplys(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      _nft: string,
      _ref: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintByQty(
      _nft: string,
      _qty: BigNumberish,
      _ref: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    minteds(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    partnerAffs(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    percentAffs(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    promotionPercents(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    promotionQtys(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    royaltyAddress(overrides?: CallOverrides): Promise<string>;

    royaltyFee(overrides?: CallOverrides): Promise<BigNumber>;

    systemPercentAffs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalPool(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAdmin(
      _admin: string,
      _isAdd: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePartnerAff(
      _nft: string,
      _partners: string[],
      _isAdd: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DeployNft(uint256,address,address)"(
      poolId?: null,
      nftAddress?: null,
      manager?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { poolId: BigNumber; nftAddress: string; manager: string }
    >;

    DeployNft(
      poolId?: null,
      nftAddress?: null,
      manager?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { poolId: BigNumber; nftAddress: string; manager: string }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    MAX_PERCENT_AFF(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_HUNDRED_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    admins(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    changeEndTime(
      _nft: string,
      _endTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeManager(
      _nft: string,
      _newManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeMaxTotalSupply(
      _nft: string,
      _maxTotalSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changePercentAff(
      _nft: string,
      _percentAff: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changePriceNft(
      _nft: string,
      _priceNft: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changePromotion(
      _nft: string,
      _qtys: BigNumberish[],
      _percents: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeRoyaltyAddress(
      _royaltyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeRoyaltyFee(
      _royaltyFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeSystemPercentAff(
      _nft: string,
      _percentAff: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    containerNfts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deploy(
      _name: string,
      _symbol: string,
      _baseUrlNft: string,
      _priceNft: BigNumberish,
      _endTime: BigNumberish,
      _maxTotalSupply: BigNumberish,
      _maxAllocationPerUser: BigNumberish,
      _percentAff: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    endTimes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getAmountOut(_nft: string, overrides?: CallOverrides): Promise<BigNumber>;

    getAmountOutByQty(
      _nft: string,
      _qty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPromotionAmountByQty(
      _nft: string,
      _qty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPromotionPercentByQty(
      _nft: string,
      _qty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPromotionPercents(
      _nft: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPromotionQtys(
      _nft: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    managers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    mapPrice(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxAllocationPerUsers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxTotalSupplys(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      _nft: string,
      _ref: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintByQty(
      _nft: string,
      _qty: BigNumberish,
      _ref: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    minteds(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    partnerAffs(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    percentAffs(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    promotionPercents(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    promotionQtys(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    royaltyAddress(overrides?: CallOverrides): Promise<BigNumber>;

    royaltyFee(overrides?: CallOverrides): Promise<BigNumber>;

    systemPercentAffs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalPool(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateAdmin(
      _admin: string,
      _isAdd: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePartnerAff(
      _nft: string,
      _partners: string[],
      _isAdd: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_PERCENT_AFF(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ONE_HUNDRED_PERCENT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    admins(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeEndTime(
      _nft: string,
      _endTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeManager(
      _nft: string,
      _newManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeMaxTotalSupply(
      _nft: string,
      _maxTotalSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changePercentAff(
      _nft: string,
      _percentAff: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changePriceNft(
      _nft: string,
      _priceNft: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changePromotion(
      _nft: string,
      _qtys: BigNumberish[],
      _percents: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeRoyaltyAddress(
      _royaltyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeRoyaltyFee(
      _royaltyFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeSystemPercentAff(
      _nft: string,
      _percentAff: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    containerNfts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deploy(
      _name: string,
      _symbol: string,
      _baseUrlNft: string,
      _priceNft: BigNumberish,
      _endTime: BigNumberish,
      _maxTotalSupply: BigNumberish,
      _maxAllocationPerUser: BigNumberish,
      _percentAff: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    endTimes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountOut(
      _nft: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountOutByQty(
      _nft: string,
      _qty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPromotionAmountByQty(
      _nft: string,
      _qty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPromotionPercentByQty(
      _nft: string,
      _qty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPromotionPercents(
      _nft: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPromotionQtys(
      _nft: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    managers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mapPrice(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxAllocationPerUsers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxTotalSupplys(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      _nft: string,
      _ref: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintByQty(
      _nft: string,
      _qty: BigNumberish,
      _ref: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    minteds(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    partnerAffs(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    percentAffs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    promotionPercents(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    promotionQtys(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    royaltyAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    royaltyFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    systemPercentAffs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateAdmin(
      _admin: string,
      _isAdd: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePartnerAff(
      _nft: string,
      _partners: string[],
      _isAdd: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
