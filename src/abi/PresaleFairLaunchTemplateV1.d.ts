/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PresaleFairLaunchTemplateV1Interface extends ethers.utils.Interface {
  functions: {
    "MAX_PERCENT_FEE_SYSTEM()": FunctionFragment;
    "ONE_HUNDRED_PERCENT()": FunctionFragment;
    "calculateSwapRate(uint256)": FunctionFragment;
    "cancel()": FunctionFragment;
    "changePercentRefund(uint256)": FunctionFragment;
    "changeRoyaltyAddress(address)": FunctionFragment;
    "claim()": FunctionFragment;
    "deposit()": FunctionFragment;
    "dexRouter()": FunctionFragment;
    "endTime()": FunctionFragment;
    "finalize()": FunctionFragment;
    "getAmountClaimByUser(address)": FunctionFragment;
    "getStatus()": FunctionFragment;
    "isCanceled()": FunctionFragment;
    "isListed()": FunctionFragment;
    "manager()": FunctionFragment;
    "maxContribution()": FunctionFragment;
    "owner()": FunctionFragment;
    "percentFeeRaised()": FunctionFragment;
    "percentRefund()": FunctionFragment;
    "refund()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "royaltyAddress()": FunctionFragment;
    "softCap()": FunctionFragment;
    "startTime()": FunctionFragment;
    "tokenAddress()": FunctionFragment;
    "tokensForLiquidity()": FunctionFragment;
    "tokensForPresale()": FunctionFragment;
    "totalContributors()": FunctionFragment;
    "totalRaised()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateDexRouter(address)": FunctionFragment;
    "updateEndTime(uint256)": FunctionFragment;
    "updateManager(address)": FunctionFragment;
    "updateSoftCap(uint256)": FunctionFragment;
    "updateStartTime(uint256)": FunctionFragment;
    "userAllocations(address)": FunctionFragment;
    "userClaimed(address)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MAX_PERCENT_FEE_SYSTEM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ONE_HUNDRED_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSwapRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "cancel", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changePercentRefund",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeRoyaltyAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(functionFragment: "dexRouter", values?: undefined): string;
  encodeFunctionData(functionFragment: "endTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "finalize", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAmountClaimByUser",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getStatus", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isCanceled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isListed", values?: undefined): string;
  encodeFunctionData(functionFragment: "manager", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxContribution",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "percentFeeRaised",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "percentRefund",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "refund", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "softCap", values?: undefined): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokensForLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokensForPresale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalContributors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalRaised",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDexRouter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEndTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSoftCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStartTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userAllocations",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "userClaimed", values: [string]): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "MAX_PERCENT_FEE_SYSTEM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ONE_HUNDRED_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateSwapRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changePercentRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeRoyaltyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dexRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "finalize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAmountClaimByUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStatus", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isCanceled", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isListed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "percentFeeRaised",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "percentRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "softCap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensForLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensForPresale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalContributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRaised",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDexRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSoftCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userAllocations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "CreatedPool(address,uint256,uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,address,address)": EventFragment;
    "Deposit(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Refund(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreatedPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Refund"): EventFragment;
}

export type CreatedPoolEvent = TypedEvent<
  [
    string,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string
  ] & {
    royaltyAddress: string;
    percentFeeRaised: BigNumber;
    percentRefund: BigNumber;
    tokenAddress: string;
    tokensForLiquidity: BigNumber;
    tokensForPresale: BigNumber;
    startTime: BigNumber;
    endTime: BigNumber;
    softCap: BigNumber;
    maxContribution: BigNumber;
    manager: string;
    dexRouter: string;
  }
>;

export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    user: string;
    allocation: BigNumber;
    totalAllocation: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type RefundEvent = TypedEvent<
  [string, BigNumber] & { user: string; amount: BigNumber }
>;

export class PresaleFairLaunchTemplateV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PresaleFairLaunchTemplateV1Interface;

  functions: {
    MAX_PERCENT_FEE_SYSTEM(overrides?: CallOverrides): Promise<[BigNumber]>;

    ONE_HUNDRED_PERCENT(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateSwapRate(
      _amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cancel(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changePercentRefund(
      _percentRefund: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeRoyaltyAddress(
      _royaltyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dexRouter(overrides?: CallOverrides): Promise<[string]>;

    endTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    finalize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAmountClaimByUser(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStatus(overrides?: CallOverrides): Promise<[number]>;

    isCanceled(overrides?: CallOverrides): Promise<[boolean]>;

    isListed(overrides?: CallOverrides): Promise<[boolean]>;

    manager(overrides?: CallOverrides): Promise<[string]>;

    maxContribution(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    percentFeeRaised(overrides?: CallOverrides): Promise<[BigNumber]>;

    percentRefund(overrides?: CallOverrides): Promise<[BigNumber]>;

    refund(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    royaltyAddress(overrides?: CallOverrides): Promise<[string]>;

    softCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    startTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenAddress(overrides?: CallOverrides): Promise<[string]>;

    tokensForLiquidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokensForPresale(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalContributors(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalRaised(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateDexRouter(
      _dexRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateEndTime(
      _endTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateManager(
      _newManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSoftCap(
      _softCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateStartTime(
      _startTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userAllocations(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userClaimed(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  MAX_PERCENT_FEE_SYSTEM(overrides?: CallOverrides): Promise<BigNumber>;

  ONE_HUNDRED_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

  calculateSwapRate(
    _amountIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cancel(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changePercentRefund(
    _percentRefund: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeRoyaltyAddress(
    _royaltyAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claim(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dexRouter(overrides?: CallOverrides): Promise<string>;

  endTime(overrides?: CallOverrides): Promise<BigNumber>;

  finalize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAmountClaimByUser(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStatus(overrides?: CallOverrides): Promise<number>;

  isCanceled(overrides?: CallOverrides): Promise<boolean>;

  isListed(overrides?: CallOverrides): Promise<boolean>;

  manager(overrides?: CallOverrides): Promise<string>;

  maxContribution(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  percentFeeRaised(overrides?: CallOverrides): Promise<BigNumber>;

  percentRefund(overrides?: CallOverrides): Promise<BigNumber>;

  refund(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  royaltyAddress(overrides?: CallOverrides): Promise<string>;

  softCap(overrides?: CallOverrides): Promise<BigNumber>;

  startTime(overrides?: CallOverrides): Promise<BigNumber>;

  tokenAddress(overrides?: CallOverrides): Promise<string>;

  tokensForLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

  tokensForPresale(overrides?: CallOverrides): Promise<BigNumber>;

  totalContributors(overrides?: CallOverrides): Promise<BigNumber>;

  totalRaised(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateDexRouter(
    _dexRouter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateEndTime(
    _endTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateManager(
    _newManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSoftCap(
    _softCap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateStartTime(
    _startTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userAllocations(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  userClaimed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_PERCENT_FEE_SYSTEM(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_HUNDRED_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    calculateSwapRate(
      _amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancel(overrides?: CallOverrides): Promise<void>;

    changePercentRefund(
      _percentRefund: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeRoyaltyAddress(
      _royaltyAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claim(overrides?: CallOverrides): Promise<void>;

    deposit(overrides?: CallOverrides): Promise<void>;

    dexRouter(overrides?: CallOverrides): Promise<string>;

    endTime(overrides?: CallOverrides): Promise<BigNumber>;

    finalize(overrides?: CallOverrides): Promise<void>;

    getAmountClaimByUser(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStatus(overrides?: CallOverrides): Promise<number>;

    isCanceled(overrides?: CallOverrides): Promise<boolean>;

    isListed(overrides?: CallOverrides): Promise<boolean>;

    manager(overrides?: CallOverrides): Promise<string>;

    maxContribution(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    percentFeeRaised(overrides?: CallOverrides): Promise<BigNumber>;

    percentRefund(overrides?: CallOverrides): Promise<BigNumber>;

    refund(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    royaltyAddress(overrides?: CallOverrides): Promise<string>;

    softCap(overrides?: CallOverrides): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    tokenAddress(overrides?: CallOverrides): Promise<string>;

    tokensForLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    tokensForPresale(overrides?: CallOverrides): Promise<BigNumber>;

    totalContributors(overrides?: CallOverrides): Promise<BigNumber>;

    totalRaised(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateDexRouter(
      _dexRouter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateEndTime(
      _endTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateManager(
      _newManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSoftCap(
      _softCap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStartTime(
      _startTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    userAllocations(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userClaimed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "CreatedPool(address,uint256,uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,address,address)"(
      royaltyAddress?: null,
      percentFeeRaised?: null,
      percentRefund?: null,
      tokenAddress?: null,
      tokensForLiquidity?: null,
      tokensForPresale?: null,
      startTime?: null,
      endTime?: null,
      softCap?: null,
      maxContribution?: null,
      manager?: null,
      dexRouter?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string
      ],
      {
        royaltyAddress: string;
        percentFeeRaised: BigNumber;
        percentRefund: BigNumber;
        tokenAddress: string;
        tokensForLiquidity: BigNumber;
        tokensForPresale: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        softCap: BigNumber;
        maxContribution: BigNumber;
        manager: string;
        dexRouter: string;
      }
    >;

    CreatedPool(
      royaltyAddress?: null,
      percentFeeRaised?: null,
      percentRefund?: null,
      tokenAddress?: null,
      tokensForLiquidity?: null,
      tokensForPresale?: null,
      startTime?: null,
      endTime?: null,
      softCap?: null,
      maxContribution?: null,
      manager?: null,
      dexRouter?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string
      ],
      {
        royaltyAddress: string;
        percentFeeRaised: BigNumber;
        percentRefund: BigNumber;
        tokenAddress: string;
        tokensForLiquidity: BigNumber;
        tokensForPresale: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        softCap: BigNumber;
        maxContribution: BigNumber;
        manager: string;
        dexRouter: string;
      }
    >;

    "Deposit(address,uint256,uint256)"(
      user?: null,
      allocation?: null,
      totalAllocation?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; allocation: BigNumber; totalAllocation: BigNumber }
    >;

    Deposit(
      user?: null,
      allocation?: null,
      totalAllocation?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; allocation: BigNumber; totalAllocation: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Refund(address,uint256)"(
      user?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    Refund(
      user?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    MAX_PERCENT_FEE_SYSTEM(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_HUNDRED_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    calculateSwapRate(
      _amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancel(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changePercentRefund(
      _percentRefund: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeRoyaltyAddress(
      _royaltyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dexRouter(overrides?: CallOverrides): Promise<BigNumber>;

    endTime(overrides?: CallOverrides): Promise<BigNumber>;

    finalize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAmountClaimByUser(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStatus(overrides?: CallOverrides): Promise<BigNumber>;

    isCanceled(overrides?: CallOverrides): Promise<BigNumber>;

    isListed(overrides?: CallOverrides): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<BigNumber>;

    maxContribution(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    percentFeeRaised(overrides?: CallOverrides): Promise<BigNumber>;

    percentRefund(overrides?: CallOverrides): Promise<BigNumber>;

    refund(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    royaltyAddress(overrides?: CallOverrides): Promise<BigNumber>;

    softCap(overrides?: CallOverrides): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    tokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    tokensForLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    tokensForPresale(overrides?: CallOverrides): Promise<BigNumber>;

    totalContributors(overrides?: CallOverrides): Promise<BigNumber>;

    totalRaised(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateDexRouter(
      _dexRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateEndTime(
      _endTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateManager(
      _newManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSoftCap(
      _softCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateStartTime(
      _startTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userAllocations(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userClaimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_PERCENT_FEE_SYSTEM(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ONE_HUNDRED_PERCENT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateSwapRate(
      _amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancel(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changePercentRefund(
      _percentRefund: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeRoyaltyAddress(
      _royaltyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dexRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAmountClaimByUser(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStatus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isCanceled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isListed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxContribution(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    percentFeeRaised(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    percentRefund(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refund(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    royaltyAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    softCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokensForLiquidity(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensForPresale(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalContributors(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalRaised(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateDexRouter(
      _dexRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateEndTime(
      _endTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateManager(
      _newManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSoftCap(
      _softCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateStartTime(
      _startTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userAllocations(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userClaimed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
