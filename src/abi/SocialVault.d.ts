/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface SocialVaultInterface extends ethers.utils.Interface {
  functions: {
    "admins(address)": FunctionFragment;
    "amountUsers(address,address)": FunctionFragment;
    "changeCreationFee(uint256)": FunctionFragment;
    "changeRoyaltyAddress(address)": FunctionFragment;
    "changeSystemAddress(address)": FunctionFragment;
    "claim(address)": FunctionFragment;
    "containers(uint256)": FunctionFragment;
    "createCampaign(address,address,uint256,uint256,uint256)": FunctionFragment;
    "creationFee()": FunctionFragment;
    "creators(address)": FunctionFragment;
    "emergencyWithdraw(uint256)": FunctionFragment;
    "endTimes(address)": FunctionFragment;
    "finalize(address,address[])": FunctionFragment;
    "isClose()": FunctionFragment;
    "minAmountClaim()": FunctionFragment;
    "nftsRegistered(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "royaltyAddress()": FunctionFragment;
    "startTimes(address)": FunctionFragment;
    "systemAddress()": FunctionFragment;
    "systemWithdraw(uint256)": FunctionFragment;
    "tokens(address)": FunctionFragment;
    "totalAmountBonus(address)": FunctionFragment;
    "totalCampaign()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateAdmin(address,bool)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "admins", values: [string]): string;
  encodeFunctionData(
    functionFragment: "amountUsers",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeCreationFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeRoyaltyAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeSystemAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "claim", values: [string]): string;
  encodeFunctionData(
    functionFragment: "containers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createCampaign",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "creationFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "creators", values: [string]): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "endTimes", values: [string]): string;
  encodeFunctionData(
    functionFragment: "finalize",
    values: [string, string[]]
  ): string;
  encodeFunctionData(functionFragment: "isClose", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minAmountClaim",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nftsRegistered",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "startTimes", values: [string]): string;
  encodeFunctionData(
    functionFragment: "systemAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "systemWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "tokens", values: [string]): string;
  encodeFunctionData(
    functionFragment: "totalAmountBonus",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalCampaign",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAdmin",
    values: [string, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "admins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "amountUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeCreationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeRoyaltyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeSystemAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "containers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "creators", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endTimes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "finalize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isClose", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minAmountClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftsRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startTimes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "systemAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "systemWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAmountBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAdmin",
    data: BytesLike
  ): Result;

  events: {
    "CreateCampaign(uint256,address,address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreateCampaign"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type CreateCampaignEvent = TypedEvent<
  [BigNumber, string, string, string, BigNumber] & {
    campaignId: BigNumber;
    creator: string;
    nftAddress: string;
    tokenAddress: string;
    totalAmountBonus: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class SocialVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SocialVaultInterface;

  functions: {
    admins(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    amountUsers(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    changeCreationFee(
      _creationFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeRoyaltyAddress(
      _royaltyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeSystemAddress(
      _systemAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claim(
      _tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    containers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    createCampaign(
      _ntfAddress: string,
      _tokenAddress: string,
      _totalAmountBonus: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    creationFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    creators(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    emergencyWithdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    endTimes(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    finalize(
      _ntfAddress: string,
      _users: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isClose(overrides?: CallOverrides): Promise<[boolean]>;

    minAmountClaim(overrides?: CallOverrides): Promise<[BigNumber]>;

    nftsRegistered(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    royaltyAddress(overrides?: CallOverrides): Promise<[string]>;

    startTimes(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    systemAddress(overrides?: CallOverrides): Promise<[string]>;

    systemWithdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokens(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    totalAmountBonus(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalCampaign(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateAdmin(
      _admin: string,
      _isAdd: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  admins(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  amountUsers(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  changeCreationFee(
    _creationFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeRoyaltyAddress(
    _royaltyAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeSystemAddress(
    _systemAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claim(
    _tokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  containers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  createCampaign(
    _ntfAddress: string,
    _tokenAddress: string,
    _totalAmountBonus: BigNumberish,
    _startTime: BigNumberish,
    _endTime: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  creationFee(overrides?: CallOverrides): Promise<BigNumber>;

  creators(arg0: string, overrides?: CallOverrides): Promise<string>;

  emergencyWithdraw(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  endTimes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  finalize(
    _ntfAddress: string,
    _users: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isClose(overrides?: CallOverrides): Promise<boolean>;

  minAmountClaim(overrides?: CallOverrides): Promise<BigNumber>;

  nftsRegistered(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  royaltyAddress(overrides?: CallOverrides): Promise<string>;

  startTimes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  systemAddress(overrides?: CallOverrides): Promise<string>;

  systemWithdraw(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokens(arg0: string, overrides?: CallOverrides): Promise<string>;

  totalAmountBonus(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  totalCampaign(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateAdmin(
    _admin: string,
    _isAdd: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    admins(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    amountUsers(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeCreationFee(
      _creationFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeRoyaltyAddress(
      _royaltyAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changeSystemAddress(
      _systemAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claim(_tokenAddress: string, overrides?: CallOverrides): Promise<void>;

    containers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    createCampaign(
      _ntfAddress: string,
      _tokenAddress: string,
      _totalAmountBonus: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creationFee(overrides?: CallOverrides): Promise<BigNumber>;

    creators(arg0: string, overrides?: CallOverrides): Promise<string>;

    emergencyWithdraw(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    endTimes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    finalize(
      _ntfAddress: string,
      _users: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    isClose(overrides?: CallOverrides): Promise<boolean>;

    minAmountClaim(overrides?: CallOverrides): Promise<BigNumber>;

    nftsRegistered(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    royaltyAddress(overrides?: CallOverrides): Promise<string>;

    startTimes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    systemAddress(overrides?: CallOverrides): Promise<string>;

    systemWithdraw(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tokens(arg0: string, overrides?: CallOverrides): Promise<string>;

    totalAmountBonus(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalCampaign(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAdmin(
      _admin: string,
      _isAdd: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CreateCampaign(uint256,address,address,address,uint256)"(
      campaignId?: null,
      creator?: null,
      nftAddress?: null,
      tokenAddress?: null,
      totalAmountBonus?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string, BigNumber],
      {
        campaignId: BigNumber;
        creator: string;
        nftAddress: string;
        tokenAddress: string;
        totalAmountBonus: BigNumber;
      }
    >;

    CreateCampaign(
      campaignId?: null,
      creator?: null,
      nftAddress?: null,
      tokenAddress?: null,
      totalAmountBonus?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string, BigNumber],
      {
        campaignId: BigNumber;
        creator: string;
        nftAddress: string;
        tokenAddress: string;
        totalAmountBonus: BigNumber;
      }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    admins(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    amountUsers(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeCreationFee(
      _creationFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeRoyaltyAddress(
      _royaltyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeSystemAddress(
      _systemAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claim(
      _tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    containers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createCampaign(
      _ntfAddress: string,
      _tokenAddress: string,
      _totalAmountBonus: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    creationFee(overrides?: CallOverrides): Promise<BigNumber>;

    creators(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    endTimes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    finalize(
      _ntfAddress: string,
      _users: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isClose(overrides?: CallOverrides): Promise<BigNumber>;

    minAmountClaim(overrides?: CallOverrides): Promise<BigNumber>;

    nftsRegistered(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    royaltyAddress(overrides?: CallOverrides): Promise<BigNumber>;

    startTimes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    systemAddress(overrides?: CallOverrides): Promise<BigNumber>;

    systemWithdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalAmountBonus(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalCampaign(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateAdmin(
      _admin: string,
      _isAdd: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    admins(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    amountUsers(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeCreationFee(
      _creationFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeRoyaltyAddress(
      _royaltyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeSystemAddress(
      _systemAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      _tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    containers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createCampaign(
      _ntfAddress: string,
      _tokenAddress: string,
      _totalAmountBonus: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    creationFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    creators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    endTimes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finalize(
      _ntfAddress: string,
      _users: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isClose(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minAmountClaim(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftsRegistered(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    royaltyAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startTimes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    systemAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    systemWithdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalAmountBonus(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalCampaign(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateAdmin(
      _admin: string,
      _isAdd: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
