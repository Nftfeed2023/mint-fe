/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface StakeMultipleERC721Interface extends ethers.utils.Interface {
  functions: {
    "authorizeNfts(address)": FunctionFragment;
    "chainId()": FunctionFragment;
    "containerNfts(uint256)": FunctionFragment;
    "getPendingRewardByTokenId(address,uint256)": FunctionFragment;
    "getPendingRewardByTokenIdOfTime(address,uint256,uint256)": FunctionFragment;
    "getPendingRewardByUser(address,address)": FunctionFragment;
    "getPendingRewardByUserOfTime(address,address,uint256)": FunctionFragment;
    "getQtyStakedByUser(address,address)": FunctionFragment;
    "grantedUnStake(address,address)": FunctionFragment;
    "nftPrice()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "poolInfos(address)": FunctionFragment;
    "qtyStaked(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "stakes(address,uint256[])": FunctionFragment;
    "startTimeStakeOfTokenId(address,uint256)": FunctionFragment;
    "totalPool()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unStake(address)": FunctionFragment;
    "updateParamsPool(address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "updateParamsPools(address[],tuple[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "authorizeNfts",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "chainId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "containerNfts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingRewardByTokenId",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingRewardByTokenIdOfTime",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingRewardByUser",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingRewardByUserOfTime",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getQtyStakedByUser",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantedUnStake",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "nftPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "poolInfos", values: [string]): string;
  encodeFunctionData(functionFragment: "qtyStaked", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakes",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "startTimeStakeOfTokenId",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "totalPool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unStake", values: [string]): string;
  encodeFunctionData(
    functionFragment: "updateParamsPool",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateParamsPools",
    values: [
      string[],
      {
        daysLocked: BigNumberish;
        rewardPerSecond: BigNumberish;
        startTime: BigNumberish;
        endTime: BigNumberish;
      }[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "authorizeNfts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "containerNfts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingRewardByTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingRewardByTokenIdOfTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingRewardByUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingRewardByUserOfTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQtyStakedByUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantedUnStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nftPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolInfos", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "qtyStaked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startTimeStakeOfTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateParamsPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateParamsPools",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class StakeMultipleERC721 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StakeMultipleERC721Interface;

  functions: {
    authorizeNfts(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    chainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    containerNfts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPendingRewardByTokenId(
      _nftAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPendingRewardByTokenIdOfTime(
      _nftAddress: string,
      _tokenId: BigNumberish,
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPendingRewardByUser(
      _nftAddress: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPendingRewardByUserOfTime(
      _nftAddress: string,
      _user: string,
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getQtyStakedByUser(
      _nftAddress: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantedUnStake(
      _nftAddress: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    nftPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    poolInfos(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        daysLocked: BigNumber;
        rewardPerSecond: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
      }
    >;

    qtyStaked(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakes(
      _nftAddress: string,
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startTimeStakeOfTokenId(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalPool(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unStake(
      _nftAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateParamsPool(
      _nftAddress: string,
      _daysLocked: BigNumberish,
      _rewardPerSecond: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateParamsPools(
      _nftAddresss: string[],
      _poolInfos: {
        daysLocked: BigNumberish;
        rewardPerSecond: BigNumberish;
        startTime: BigNumberish;
        endTime: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  authorizeNfts(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  chainId(overrides?: CallOverrides): Promise<BigNumber>;

  containerNfts(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getPendingRewardByTokenId(
    _nftAddress: string,
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPendingRewardByTokenIdOfTime(
    _nftAddress: string,
    _tokenId: BigNumberish,
    _time: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPendingRewardByUser(
    _nftAddress: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPendingRewardByUserOfTime(
    _nftAddress: string,
    _user: string,
    _time: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getQtyStakedByUser(
    _nftAddress: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantedUnStake(
    _nftAddress: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  nftPrice(overrides?: CallOverrides): Promise<BigNumber>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  poolInfos(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      daysLocked: BigNumber;
      rewardPerSecond: BigNumber;
      startTime: BigNumber;
      endTime: BigNumber;
    }
  >;

  qtyStaked(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakes(
    _nftAddress: string,
    _tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startTimeStakeOfTokenId(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalPool(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unStake(
    _nftAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateParamsPool(
    _nftAddress: string,
    _daysLocked: BigNumberish,
    _rewardPerSecond: BigNumberish,
    _startTime: BigNumberish,
    _endTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateParamsPools(
    _nftAddresss: string[],
    _poolInfos: {
      daysLocked: BigNumberish;
      rewardPerSecond: BigNumberish;
      startTime: BigNumberish;
      endTime: BigNumberish;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    authorizeNfts(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    chainId(overrides?: CallOverrides): Promise<BigNumber>;

    containerNfts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getPendingRewardByTokenId(
      _nftAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingRewardByTokenIdOfTime(
      _nftAddress: string,
      _tokenId: BigNumberish,
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingRewardByUser(
      _nftAddress: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingRewardByUserOfTime(
      _nftAddress: string,
      _user: string,
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQtyStakedByUser(
      _nftAddress: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantedUnStake(
      _nftAddress: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nftPrice(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    poolInfos(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        daysLocked: BigNumber;
        rewardPerSecond: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
      }
    >;

    qtyStaked(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    stakes(
      _nftAddress: string,
      _tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    startTimeStakeOfTokenId(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalPool(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unStake(_nftAddress: string, overrides?: CallOverrides): Promise<void>;

    updateParamsPool(
      _nftAddress: string,
      _daysLocked: BigNumberish,
      _rewardPerSecond: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateParamsPools(
      _nftAddresss: string[],
      _poolInfos: {
        daysLocked: BigNumberish;
        rewardPerSecond: BigNumberish;
        startTime: BigNumberish;
        endTime: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    authorizeNfts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    chainId(overrides?: CallOverrides): Promise<BigNumber>;

    containerNfts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingRewardByTokenId(
      _nftAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingRewardByTokenIdOfTime(
      _nftAddress: string,
      _tokenId: BigNumberish,
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingRewardByUser(
      _nftAddress: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingRewardByUserOfTime(
      _nftAddress: string,
      _user: string,
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQtyStakedByUser(
      _nftAddress: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantedUnStake(
      _nftAddress: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftPrice(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    poolInfos(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    qtyStaked(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakes(
      _nftAddress: string,
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startTimeStakeOfTokenId(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalPool(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unStake(
      _nftAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateParamsPool(
      _nftAddress: string,
      _daysLocked: BigNumberish,
      _rewardPerSecond: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateParamsPools(
      _nftAddresss: string[],
      _poolInfos: {
        daysLocked: BigNumberish;
        rewardPerSecond: BigNumberish;
        startTime: BigNumberish;
        endTime: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    authorizeNfts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    containerNfts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingRewardByTokenId(
      _nftAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingRewardByTokenIdOfTime(
      _nftAddress: string,
      _tokenId: BigNumberish,
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingRewardByUser(
      _nftAddress: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingRewardByUserOfTime(
      _nftAddress: string,
      _user: string,
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQtyStakedByUser(
      _nftAddress: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantedUnStake(
      _nftAddress: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolInfos(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    qtyStaked(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakes(
      _nftAddress: string,
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startTimeStakeOfTokenId(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unStake(
      _nftAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateParamsPool(
      _nftAddress: string,
      _daysLocked: BigNumberish,
      _rewardPerSecond: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateParamsPools(
      _nftAddresss: string[],
      _poolInfos: {
        daysLocked: BigNumberish;
        rewardPerSecond: BigNumberish;
        startTime: BigNumberish;
        endTime: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
